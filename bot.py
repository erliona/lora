import os
import logging
import base64
import asyncio
import time
import aiohttp
import sqlite3
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)
from telegram.error import BadRequest, RetryAfter
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
DEBUG_MODE = os.getenv('DEBUG', 'false').lower() == 'true'
log_level = logging.DEBUG if DEBUG_MODE else logging.INFO

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=log_level
)
logger = logging.getLogger(__name__)

if DEBUG_MODE:
    logger.info("üêõ DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0'))
# ComfyUI-Connect endpoint –¥–ª—è workflow 'api-video'
API_URL = 'https://cuda.serge.cc/api/connect/workflows/api-video'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
TOKENS_PER_VIDEO = int(os.getenv('TOKENS_PER_VIDEO', '10'))
DEFAULT_TOKENS = int(os.getenv('DEFAULT_TOKENS', '100'))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
DURATIONS = {
    '5': {
        'seconds': 5,
        'cost': 5,
        'name': '‚ö° 5 —Å–µ–∫—É–Ω–¥',
        'description': '–ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ –¥–ª—è Stories',
        'emoji': '‚ö°',
    },
    '10': {
        'seconds': 10,
        'cost': 10,
        'name': '‚≠ê 10 —Å–µ–∫—É–Ω–¥',
        'description': '–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        'emoji': '‚≠ê',
        'recommended': True,
    },
    '15': {
        'seconds': 15,
        'cost': 15,
        'name': 'üé¨ 15 —Å–µ–∫—É–Ω–¥',
        'description': '–ü–æ–ª–Ω–æ–µ –≤–∏–¥–µ–æ',
        'emoji': 'üé¨',
    }
}

QUALITIES = {
    'low': {
        'name': 'üì± –ù–∏–∑–∫–æ–µ',
        'pixels': 300,
        'cost_modifier': 0,
        'description': '–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞',
        'emoji': 'üì±',
    },
    'medium': {
        'name': 'üíé –°—Ä–µ–¥–Ω–µ–µ',
        'pixels': 600,
        'cost_modifier': 0,
        'description': '–ë–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–∑–º–µ—Ä–∞',
        'emoji': 'üíé',
        'recommended': True,
    },
    'high': {
        'name': 'üéØ –í—ã—Å–æ–∫–æ–µ',
        'pixels': 832,
        'cost_modifier': 5,
        'description': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
        'emoji': 'üéØ',
    }
}

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
class ProcessingStats:
    def __init__(self, stats_file='processing_stats.json'):
        self.stats_file = stats_file
        self.times = []  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.times_by_settings = {}  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: {"duration_quality": [times]}
        self.load()
    
    def load(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.stats_file):
                with open(self.stats_file, 'r') as f:
                    import json
                    data = json.load(f)
                    
                    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç bot_old.py
                    if 'completion_times' in data:
                        self.times = data['completion_times']
                        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.times)} –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")
                    else:
                        self.times = data.get('times', [])
                        self.times_by_settings = data.get('times_by_settings', {})
                        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.times)} –∑–∞–ø–∏—Å–µ–π + {len(self.times_by_settings)} –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            self.times = []
            self.times_by_settings = {}
    
    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            import json
            with open(self.stats_file, 'w') as f:
                json.dump({
                    'times': self.times,
                    'times_by_settings': self.times_by_settings
                }, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def add_time(self, duration, video_duration=None, quality=None):
        """–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.times.append(duration)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ –∫–ª—é—á—É
        if video_duration is not None and quality is not None:
            key = f"{video_duration}_{quality}"
            if key not in self.times_by_settings:
                self.times_by_settings[key] = []
            self.times_by_settings[key].append(duration)
            
            # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if len(self.times_by_settings[key]) > 20:
                self.times_by_settings[key] = self.times_by_settings[key][-20:]
        
        # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
        if len(self.times) > 100:
            self.times = self.times[-100:]
        self.save()
        logger.info(f"üìä –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {format_time(duration)}, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.times)}")
    
    def get_times(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–∞"""
        return self.times
    
    def get_average(self):
        """–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π"""
        if not self.times:
            return 120
        recent = self.times[-10:]
        return sum(recent) / len(recent)
    
    def get_average_by_settings(self, video_duration, quality):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        key = f"{video_duration}_{quality}"
        if key in self.times_by_settings and self.times_by_settings[key]:
            times = self.times_by_settings[key]
            return sum(times) / len(times)
        return None

processing_stats = ProcessingStats()

# –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤
class TokenBalance:
    def __init__(self, db_path='balances.db'):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS balances (
                user_id INTEGER PRIMARY KEY,
                tokens INTEGER NOT NULL DEFAULT 0,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                videos_created INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        cursor.execute("PRAGMA table_info(balances)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'first_name' not in columns:
            logger.info("üìù –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ first_name")
            cursor.execute('ALTER TABLE balances ADD COLUMN first_name TEXT')
        
        if 'last_name' not in columns:
            logger.info("üìù –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ last_name")
            cursor.execute('ALTER TABLE balances ADD COLUMN last_name TEXT')
        
        if 'videos_created' not in columns:
            logger.info("üìù –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ videos_created")
            cursor.execute('ALTER TABLE balances ADD COLUMN videos_created INTEGER DEFAULT 0')
            cursor.execute('UPDATE balances SET videos_created = 0 WHERE videos_created IS NULL')
        
        conn.commit()
        conn.close()
        logger.info("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –≥–æ—Ç–æ–≤–∞")
    
    def get_balance(self, user_id):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT tokens FROM balances WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return result[0]
        else:
            self.add_tokens(user_id, DEFAULT_TOKENS)
            return DEFAULT_TOKENS
    
    def add_tokens(self, user_id, amount, username=None, first_name=None, last_name=None):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO balances (user_id, tokens, username, first_name, last_name) 
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(user_id) 
            DO UPDATE SET 
                tokens = tokens + ?, 
                username = COALESCE(?, username),
                first_name = COALESCE(?, first_name),
                last_name = COALESCE(?, last_name),
                updated_at = CURRENT_TIMESTAMP
        ''', (user_id, amount, username, first_name, last_name, amount, username, first_name, last_name))
        
        conn.commit()
        
        cursor.execute('SELECT tokens FROM balances WHERE user_id = ?', (user_id,))
        new_balance = cursor.fetchone()[0]
        conn.close()
        
        logger.info(f"üí∞ +{amount} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {user_id} ({username}), –±–∞–ª–∞–Ω—Å: {new_balance}")
        return new_balance
    
    def increment_videos(self, user_id):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE balances 
            SET videos_created = videos_created + 1 
            WHERE user_id = ?
        ''', (user_id,))
        conn.commit()
        conn.close()
    
    def spend_tokens(self, user_id, amount):
        balance = self.get_balance(user_id)
        
        if balance < amount:
            return False
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE balances 
            SET tokens = tokens - ?, updated_at = CURRENT_TIMESTAMP 
            WHERE user_id = ?
        ''', (amount, user_id))
        conn.commit()
        conn.close()
        
        logger.info(f"üí∏ -{amount} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å: {balance - amount}")
        return True
    
    def get_all_users(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_id, tokens, username, first_name, last_name, videos_created, 
                   created_at, updated_at 
            FROM balances 
            ORDER BY tokens DESC
        ''')
        users = cursor.fetchall()
        conn.close()
        return users

token_balance = TokenBalance()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ

def calculate_cost(duration, quality):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å"""
    base_cost = DURATIONS[str(duration)]['cost']
    quality_mod = QUALITIES[quality]['cost_modifier']
    return base_cost + quality_mod

def format_size_kb(bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤ KB"""
    return f"{bytes // 1024} KB"

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)}—Å"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes}–º {secs}—Å"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours}—á {minutes}–º"

def get_estimated_time(duration, quality):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —ç—Ç–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    exact_time = processing_stats.get_average_by_settings(duration, quality)
    if exact_time:
        logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è {duration}—Å/{quality}: {format_time(exact_time)}")
        return format_time(exact_time)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ (—ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π fallback)
    general_average = processing_stats.get_average()
    if general_average > 0:
        logger.info(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {format_time(general_average)}")
        return format_time(general_average)
    
    # –ï—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_time = 120  # 2 –º–∏–Ω—É—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    logger.info(f"üîÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {format_time(default_time)}")
    return format_time(default_time)

def get_average_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤)"""
    return processing_stats.get_average()

def get_progress_bar(progress):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = int(progress * 20)
    return "‚ñì" * filled + "‚ñë" * (20 - filled)

async def safe_edit_message(message, text, max_retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    for attempt in range(max_retries):
        try:
            await message.edit_text(text)
            return True
        except RetryAfter as e:
            logger.warning(f"Rate limit, –∂–¥–µ–º {e.retry_after}—Å")
            await asyncio.sleep(e.retry_after)
        except BadRequest as e:
            if "Message is not modified" in str(e):
                return True
            elif "Message can't be edited" in str(e):
                return False
            else:
                logger.error(f"BadRequest: {e}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(1)
    return False

def create_main_menu():
    """–°–æ–∑–¥–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ", callback_data='create_video'),
            InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º", callback_data='quick_mode')
        ],
        [
            InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data='balance'),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')
        ],
        [
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    user = update.effective_user
    first_name = user.first_name or user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    last_name = user.last_name
    username = user.username
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    balance = token_balance.get_balance(user_id)
    token_balance.add_tokens(user_id, 0, username, first_name, last_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new_user = balance == DEFAULT_TOKENS
    
    if is_new_user:
        # –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        text = f"""üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}!

–Ø —Å–æ–∑–¥–∞—é –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ –≤–∞—à–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò.

üéÅ **–ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫–∞**: {DEFAULT_TOKENS} —Ç–æ–∫–µ–Ω–æ–≤ –≤ –ø–æ–¥–∞—Ä–æ–∫!

üé¨ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ ‚Üí –ø–æ–ª—É—á–∏—Ç–µ –≤–∏–¥–µ–æ
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ
‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: –æ—Ç 5 —Ç–æ–∫–µ–Ω–æ–≤

–ì–æ—Ç–æ–≤—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?"""
    else:
        # –û–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        avg_time = get_average_time()
        times = processing_stats.get_times()
        stats_text = ""
        if times:
            stats_text = f"\nüìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {format_time(avg_time)}"
        
        text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

–Ø —Å–æ–∑–¥–∞—é –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!{stats_text}

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å**: {balance} —Ç–æ–∫–µ–Ω–æ–≤
üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å**: –æ—Ç 5 —Ç–æ–∫–µ–Ω–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await update.message.reply_text(
        text,
        reply_markup=create_main_menu()
    )

async def handle_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == 'create_video':
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
        await query.edit_message_text(
            "üé¨ **–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
        context.user_data['create_session'] = {
            'user_id': user_id,
            'username': query.from_user.username or query.from_user.first_name
        }
        context.user_data['waiting_for_photo'] = 'wizard'
        
    elif data == 'quick_mode':
        # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        await query.edit_message_text(
            "‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ (10 —Å–µ–∫, —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ):",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
        context.user_data['waiting_for_photo'] = 'quick'
        
    elif data == 'balance':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = token_balance.get_balance(user_id)
        username = query.from_user.username or query.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        await query.edit_message_text(
            f"üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å**\n\n"
            f"üë§ {username}\n"
            f"ü™ô –¢–æ–∫–µ–Ω–æ–≤: {balance}\n"
            f"üé¨ –î–æ—Å—Ç—É–ø–Ω–æ –≤–∏–¥–µ–æ: {balance // 5}\n\n"
            f"üí° –û–¥–∏–Ω —Ç–æ–∫–µ–Ω = 1 —Å–µ–∫—É–Ω–¥–∞ –≤–∏–¥–µ–æ",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
        
    elif data == 'stats':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        times = processing_stats.get_times()
        if times:
            avg_time = get_average_time()
            fastest = min(times)
            slowest = max(times)
            recent_times = times[-10:] if len(times) >= 10 else times
            recent_str = ", ".join([format_time(t) for t in recent_times])
            
            text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏** ({len(times)} –≤–∏–¥–µ–æ)

‚ö° **–ë—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ**: {format_time(fastest)}
üìà **–í —Å—Ä–µ–¥–Ω–µ–º**: {format_time(avg_time)}
üêå **–î–æ–ª—å—à–µ –≤—Å–µ–≥–æ**: {format_time(slowest)}

üîÑ **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10**: {recent_str}"""
        else:
            text = "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
        
    elif data == 'help':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        await query.edit_message_text(
            "‚ùì **–ü–æ–º–æ—â—å**\n\n"
            "üé¨ **–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ:**\n"
            "‚Ä¢ –ú–∞—Å—Ç–µ—Ä: –≤—ã–±–æ—Ä –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞\n"
            "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π: 10 —Å–µ–∫, —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n\n"
            "üí∞ **–¢–æ–∫–µ–Ω—ã:**\n"
            "‚Ä¢ 5 —Ç–æ–∫–µ–Ω–æ–≤ = 5 —Å–µ–∫—É–Ω–¥ –≤–∏–¥–µ–æ\n"
            "‚Ä¢ 10 —Ç–æ–∫–µ–Ω–æ–≤ = 10 —Å–µ–∫—É–Ω–¥ –≤–∏–¥–µ–æ\n"
            "‚Ä¢ 15 —Ç–æ–∫–µ–Ω–æ–≤ = 15 —Å–µ–∫—É–Ω–¥ –≤–∏–¥–µ–æ\n\n"
            "üì± **–ù–∞–≤–∏–≥–∞—Ü–∏—è:**\n"
            "‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
            "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –≤–µ–∑–¥–µ\n\n"
            "üí° **–°–æ–≤–µ—Ç:** –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
        
    elif data == 'create_more':
        # –°–æ–∑–¥–∞—Ç—å –µ—â–µ —á–µ—Ä–µ–∑ –º–∞—Å—Ç–µ—Ä
        await query.answer("üé¨ –ó–∞–ø—É—Å–∫–∞—é –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ")
        await query.message.reply_text(
            "üé¨ **–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –º–∞—Å—Ç–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
        context.user_data['create_session'] = {
            'user_id': user_id,
            'username': query.from_user.username or query.from_user.first_name
        }
        context.user_data['waiting_for_photo'] = 'wizard'
        
    elif data == 'quick_more':
        # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
        await query.answer("‚ö° –ó–∞–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º")
        await query.message.reply_text(
            "‚ö° **–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ (10 —Å–µ–∫, —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ):",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_menu')
            ]])
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
        context.user_data['waiting_for_photo'] = 'quick'
        
    elif data == 'back_to_menu':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.answer("üè† –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        user = query.from_user
        first_name = user.first_name or user.username or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        balance = token_balance.get_balance(user_id)
        
        text = f"""üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

–Ø —Å–æ–∑–¥–∞—é –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!

üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å**: {balance} —Ç–æ–∫–µ–Ω–æ–≤
üíµ **–°—Ç–æ–∏–º–æ—Å—Ç—å**: –æ—Ç 5 —Ç–æ–∫–µ–Ω–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.message.reply_text(
            text,
            reply_markup=create_main_menu()
        )
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –∏ —Å–µ—Å—Å–∏—é –º–∞—Å—Ç–µ—Ä–∞
        context.user_data.pop('waiting_for_photo', None)
        context.user_data.pop('create_session', None)

def create_generate_more_menu():
    """–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é '–°–æ–∑–¥–∞—Ç—å –µ—â–µ'"""
    keyboard = [
        [
            InlineKeyboardButton("üé¨ –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data='create_more'),
            InlineKeyboardButton("‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º", callback_data='quick_more')
        ],
        [
            InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_menu')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /balance"""
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    balance = token_balance.get_balance(user_id)
    videos_available = balance // TOKENS_PER_VIDEO
    
    await update.message.reply_text(
        f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å\n\n'
        f'üë§ {username}\n'
        f'ü™ô –¢–æ–∫–µ–Ω–æ–≤: {balance}\n'
        f'üé¨ –í–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {videos_available}\n\n'
        f'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {TOKENS_PER_VIDEO} —Ç–æ–∫–µ–Ω–æ–≤/–≤–∏–¥–µ–æ'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    times = processing_stats.get_times()
    
    if not times:
        await update.message.reply_text(
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n'
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞!'
        )
        return
    
    avg = sum(times) / len(times)
    recent_avg = get_average_time()
    min_time = min(times)
    max_time = max(times)
    
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({len(times)} –≤–∏–¥–µ–æ):\n\n"
        f"‚ö° –ë—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ: {format_time(min_time)}\n"
        f"üìà –í —Å—Ä–µ–¥–Ω–µ–º: {format_time(avg)}\n"
        f"üêå –î–æ–ª—å—à–µ –≤—Å–µ–≥–æ: {format_time(max_time)}\n"
        f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10: {format_time(recent_avg)}"
    )
    
    await update.message.reply_text(stats_text)

async def addtokens_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /addtokens - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text('‚ùå –ù–µ—Ç –ø—Ä–∞–≤')
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            'üìù /addtokens USER_ID AMOUNT\n'
            '–ü—Ä–∏–º–µ—Ä: /addtokens 123456 100'
        )
        return
    
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        new_balance = token_balance.add_tokens(target_id, amount)
        await update.message.reply_text(
            f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount}\n'
            f'üë§ ID: {target_id}\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: {new_balance}'
        )
    except ValueError:
        await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {e}')

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text('‚ùå –ù–µ—Ç –ø—Ä–∞–≤')
        return
    
    users = token_balance.get_all_users()
    
    if not users:
        await update.message.reply_text('üìã –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        return
    
    text = 'üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n'
    for user_data in users[:15]:
        uid, tokens, uname, fname, lname, videos, created, updated = user_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è
        full_name = ' '.join(filter(None, [fname, lname]))
        display_name = full_name or uname or '–ë–µ–∑ –∏–º–µ–Ω–∏'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        from datetime import datetime
        try:
            created_dt = datetime.fromisoformat(created)
            created_str = created_dt.strftime('%d.%m.%Y')
        except:
            created_str = '–Ω/–¥'
        
        text += (
            f'üë§ {display_name}\n'
            f'   ID: {uid}\n'
        )
        
        if uname:
            text += f'   @{uname}\n'
        
        text += (
            f'   üí∞ –¢–æ–∫–µ–Ω–æ–≤: {tokens}\n'
            f'   üé¨ –í–∏–¥–µ–æ: {videos}\n'
            f'   üìÖ –° {created_str}\n\n'
        )
    
    if len(users) > 15:
        text += f'...–∏ –µ—â–µ {len(users) - 15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    
    text += f'\n\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}'
    
    await update.message.reply_text(text)

async def update_progress(message, start_time, phase="–û–±—Ä–∞–±–æ—Ç–∫–∞"):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è"""
    elapsed = time.time() - start_time
    avg_time = get_average_time()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–º–∞–∫—Å 95% –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
    if elapsed < avg_time:
        progress = min(elapsed / avg_time * 0.95, 0.95)
    else:
        progress = 0.95
    
    progress_bar = get_progress_bar(progress)
    
    # –û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    remaining = max(0, avg_time - elapsed)
    
    if remaining < 10:
        estimate = "–ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ"
    elif remaining < 60:
        estimate = f"~{int(remaining)}—Å"
    else:
        minutes = int(remaining // 60)
        seconds = int(remaining % 60)
        estimate = f"~{minutes}–º {seconds}—Å"
    
    # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
    spinner = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
    frame = spinner[int(elapsed * 2) % len(spinner)]
    
    text = (
        f"{frame} {phase}...\n\n"
        f"üìä [{progress_bar}] {int(progress*100)}%\n"
        f"‚è± –ü—Ä–æ—à–ª–æ: {format_time(elapsed)}\n"
        f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: {estimate}"
    )
    
    await safe_edit_message(message, text)

async def process_comfyui_connect(session, photo_base64, client_id, status_message, start_time,
                                  duration=None, quality=None):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ ComfyUI-Connect –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    Args:
        duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5/10/15) –∏–ª–∏ None –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç
        quality: –ö–∞—á–µ—Å—Ç–≤–æ 'low'/'medium'/'high' –∏–ª–∏ None –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º payload
    payload = {
        "image": {
            "image": {
                "type": "file",
                "content": photo_base64,
                "name": f"input_{client_id}.jpg"
            }
        },
        "client_id": client_id
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ OpenAPI)
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if duration is None:
        duration = 10  # –°—Ç–∞–Ω–¥–∞—Ä—Ç
    
    if quality is None:
        quality = 'medium'  # –°—Ç–∞–Ω–¥–∞—Ä—Ç
    
    quality_pixels = QUALITIES[quality]['pixels']
    
    payload["duration"] = {"value": duration}
    payload["quality"] = {"value": quality_pixels}
    
    logger.info(f"üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üì∫ –ö–∞—á–µ—Å—Ç–≤–æ: {quality_pixels}px")
    
    logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ ComfyUI-Connect: {API_URL}")
    logger.debug(f"Payload keys: {payload.keys()}")
    
    try:
        # ComfyUI-Connect –º–æ–∂–µ—Ç –¥–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
        timeout = aiohttp.ClientTimeout(total=600)  # 10 –º–∏–Ω—É—Ç
        
        async with session.post(API_URL, json=payload, timeout=timeout) as response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status != 200:
                error_text = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}")
                logger.error(f"Response: {error_text[:500]}")
                return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (HTTP {response.status})"
            
            # ComfyUI-Connect –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result = await response.json()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import json as json_lib
            result_str = json_lib.dumps(result, indent=2, ensure_ascii=False)
            # –û–±—Ä–µ–∑–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ base64 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ª–æ–≥–æ–≤
            if len(result_str) > 2000:
                logger.info(f"Full response (truncated): {result_str[:2000]}...")
            else:
                logger.info(f"Full response: {result_str}")
            
            logger.info(f"Response keys: {list(result.keys())}")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á—É
            for key, value in result.items():
                if isinstance(value, str):
                    logger.info(f"  {key}: string –¥–ª–∏–Ω–∞={len(value)} –Ω–∞—á–∞–ª–æ={value[:100]}")
                elif isinstance(value, list):
                    logger.info(f"  {key}: list —ç–ª–µ–º–µ–Ω—Ç–æ–≤={len(value)}")
                    if len(value) > 0:
                        logger.info(f"    –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(value[0]).__name__}")
                        if isinstance(value[0], str) and len(value[0]) > 50:
                            logger.info(f"    –Ω–∞—á–∞–ª–æ: {value[0][:100]}")
                elif isinstance(value, dict):
                    logger.info(f"  {key}: dict –∫–ª—é—á–µ–π={len(value.keys())}, keys={list(value.keys())}")
                else:
                    logger.info(f"  {key}: {type(value).__name__} = {value}")
            
            # –ò—â–µ–º –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç–µ
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ workflow, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            # –û–±—ã—á–Ω–æ —ç—Ç–æ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "output", "video", "result" –∏ —Ç.–¥.
            
            video_data = None
            found_key = None
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            def is_media_data(data):
                """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤"""
                if len(data) < 10:
                    return False
                # MP4, MOV, M4V
                if data[:4] in [b'\x00\x00\x00\x18', b'\x00\x00\x00\x1c', b'\x00\x00\x00 ', 
                               b'\x00\x00\x00\x14', b'ftyp']:
                    return True
                # GIF
                if data[:3] == b'GIF':
                    return True
                # JPEG
                if data[:2] == b'\xff\xd8':
                    return True
                # PNG
                if data[:4] == b'\x89PNG':
                    return True
                # WebM
                if data[:4] == b'\x1aE\xdf\xa3':
                    return True
                return False
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á 'output' (–∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ #output)
            priority_keys = ['output', 'result', 'video', 'image']
            all_keys = priority_keys + [k for k in result.keys() if k not in priority_keys]
            
            for key in all_keys:
                if key not in result:
                    continue
                    
                value = result[key]
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á '{key}' —Ç–∏–ø–∞ {type(value).__name__}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (base64), –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                if isinstance(value, str) and len(value) > 100:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π base64
                        decoded = base64.b64decode(value)
                        logger.info(f"  ‚úì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} –±–∞–π—Ç, –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã: {decoded[:20].hex()}")
                        
                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–µ (–±–æ–ª—å—à–µ 10KB), —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –º–µ–¥–∏–∞
                        if len(decoded) > 10000:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã
                            if is_media_data(decoded):
                                video_data = decoded
                                found_key = key
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –∫–ª—é—á–µ '{key}' –ø–æ magic bytes, —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                break
                            else:
                                # –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º
                                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ magic bytes, –Ω–æ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π ({len(decoded)} –±–∞–π—Ç), –ø—Ä–æ–±—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
                                video_data = decoded
                                found_key = key
                                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ '{key}', —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                break
                    except Exception as e:
                        logger.debug(f"–ö–ª—é—á '{key}' –Ω–µ base64: {e}")
                        continue
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ base64 —Å—Ç—Ä–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–æ–≤)
                elif isinstance(value, list) and len(value) > 0:
                    logger.info(f"  üìã –°–ø–∏—Å–æ–∫ –∏–∑ {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    try:
                        first_item = value[0]
                        if isinstance(first_item, str) and len(first_item) > 100:
                            decoded = base64.b64decode(first_item)
                            logger.info(f"  ‚úì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} –±–∞–π—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞, –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã: {decoded[:20].hex()}")
                            
                            if len(decoded) > 10000:
                                if is_media_data(decoded):
                                    video_data = decoded
                                    found_key = f"{key}[0]"
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –º–∞—Å—Å–∏–≤–µ '{key}' –ø–æ magic bytes, —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                    break
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ magic bytes –≤ –º–∞—Å—Å–∏–≤–µ, –Ω–æ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π ({len(decoded)} –±–∞–π—Ç)")
                                    video_data = decoded
                                    found_key = f"{key}[0]"
                                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ '{key}', —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                    break
                    except Exception as e:
                        logger.debug(f"–ú–∞—Å—Å–∏–≤ '{key}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç base64: {e}")
                        continue
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
                elif isinstance(value, dict):
                    logger.info(f"  üì¶ –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: {list(value.keys())}")
                    try:
                        # –ò—â–µ–º –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞—Ä—è –∫–ª—é—á–∏ —Ç–∏–ø–∞ 'data', 'content', 'file'
                        for subkey in ['data', 'content', 'file', 'video', 'image', 'output']:
                            if subkey in value:
                                subvalue = value[subkey]
                                logger.info(f"    üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á '{subkey}' —Ç–∏–ø–∞ {type(subvalue).__name__}")
                                
                                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                                if isinstance(subvalue, list) and len(subvalue) > 0:
                                    first_item = subvalue[0]
                                    logger.info(f"      üìã –°–ø–∏—Å–æ–∫ –∏–∑ {len(subvalue)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                                    if isinstance(first_item, str) and len(first_item) > 100:
                                        decoded = base64.b64decode(first_item)
                                        logger.info(f"      ‚úì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} –±–∞–π—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, hex: {decoded[:20].hex()}")
                                        
                                        if len(decoded) > 10000:
                                            if is_media_data(decoded):
                                                video_data = decoded
                                                found_key = f"{key}.{subkey}[0]"
                                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ '{key}.{subkey}[0]' –ø–æ magic bytes, —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                                break
                                            else:
                                                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ magic bytes –≤ '{key}.{subkey}[0]', –Ω–æ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π ({len(decoded)} –±–∞–π—Ç)")
                                                video_data = decoded
                                                found_key = f"{key}.{subkey}[0]"
                                                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ '{key}.{subkey}[0]', —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                                break
                                
                                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
                                elif isinstance(subvalue, str) and len(subvalue) > 100:
                                    decoded = base64.b64decode(subvalue)
                                    logger.info(f"    ‚úì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} –±–∞–π—Ç")
                                    
                                    if len(decoded) > 10000:
                                        if is_media_data(decoded):
                                            video_data = decoded
                                            found_key = f"{key}.{subkey}"
                                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ '{key}.{subkey}' –ø–æ magic bytes, —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                            break
                                        else:
                                            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ magic bytes –≤ '{key}.{subkey}', –Ω–æ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π")
                                            video_data = decoded
                                            found_key = f"{key}.{subkey}"
                                            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ '{key}.{subkey}', —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                            break
                        if video_data:
                            break
                    except Exception as e:
                        logger.debug(f"Dict '{key}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞: {e}")
                        continue
            
            if video_data:
                return video_data, None
            else:
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç–µ. –ö–ª—é—á–∏: {list(result.keys())}")
                # Fallback: –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ History API (–¥–ª—è VHS_VideoCombine)
                logger.info("üîç Output –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ History API...")
                
                # –ò–º—è —Ñ–∞–π–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏)
                search_filename = f"input_{client_id}.jpg"
                logger.info(f"üîé –ò—â—É –∑–∞–¥–∞—á—É —Å —Ñ–∞–π–ª–æ–º: {search_filename}")
                
                # –ñ–¥–µ–º —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ —Ç–æ—á–Ω–æ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ history
                await asyncio.sleep(5)
                
                for attempt in range(20):  # 20 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 3 —Å–µ–∫—É–Ω–¥—ã
                    try:
                        history_url = "https://cuda.serge.cc/history"
                        async with session.get(history_url) as hist_response:
                            if hist_response.status != 200:
                                await asyncio.sleep(3)
                                continue
                            
                            history = await hist_response.json()
                            logger.debug(f"History: {len(history)} –∑–∞–ø–∏—Å–µ–π")
                            
                            # –ò—â–µ–º –Ω–∞—à—É –∑–∞–¥–∞—á—É –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ workflow
                            for prompt_id, prompt_data in history.items():
                                if not isinstance(prompt_data, dict):
                                    continue
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º workflow (prompt[2])
                                prompt = prompt_data.get('prompt', [])
                                if isinstance(prompt, list) and len(prompt) > 2:
                                    workflow = prompt[2]
                                    
                                    # –ò—â–µ–º search_filename –≤ workflow
                                    import json as json_lib
                                    workflow_str = json_lib.dumps(workflow)
                                    
                                    if search_filename in workflow_str:
                                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞: {prompt_id}")
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º outputs
                                        outputs = prompt_data.get('outputs', {})
                                        if not outputs:
                                            logger.debug(f"Outputs –ø–æ–∫–∞ –ø—É—Å—Ç—ã –¥–ª—è {prompt_id}, –∂–¥—É...")
                                            continue
                                        
                                        for node_id, node_output in outputs.items():
                                            if not isinstance(node_output, dict):
                                                continue
                                            
                                            for output_key in ['gifs', 'videos']:
                                                videos = node_output.get(output_key, [])
                                                if videos and isinstance(videos, list):
                                                    for video_info in videos:
                                                        if isinstance(video_info, dict):
                                                            filename = video_info.get('filename', '')
                                                            if filename.endswith(('.mp4', '.webm', '.avi', '.mov', '.gif')):
                                                                subfolder = video_info.get('subfolder', '')
                                                                folder_type = video_info.get('type', 'output')
                                                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {filename}")
                                                                
                                                                download_url = "https://cuda.serge.cc/view"
                                                                params = {"filename": filename, "type": folder_type, "subfolder": subfolder}
                                                                
                                                                async with session.get(download_url, params=params) as dl_response:
                                                                    if dl_response.status == 200:
                                                                        video_bytes = await dl_response.read()
                                                                        logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(video_bytes)} –±–∞–π—Ç")
                                                                        return video_bytes, None
                        
                    except Exception as e:
                        logger.error(f"History error: {e}")
                    
                    await asyncio.sleep(3)
                
                return None, "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ history"
    
    except asyncio.TimeoutError:
        logger.error(f"‚è± –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ 10 –º–∏–Ω—É—Ç")
        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (10 –º–∏–Ω)"
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        return None, f"–û—à–∏–±–∫–∞: {str(e)[:100]}"

# ============================================
# –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ú–ê–°–¢–ï–† –°–û–ó–î–ê–ù–ò–Ø –í–ò–î–ï–û
# ============================================

async def create_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /create - –∑–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ"""
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    balance = token_balance.get_balance(user_id)
    
    if balance < 5:
        await update.message.reply_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}\n"
            "üíµ –ú–∏–Ω–∏–º—É–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: 5 —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        return
    
    context.user_data['create_session'] = {
        'started_at': time.time(),
        'step': 1,
        'user_id': user_id,
        'username': username
    }
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]]
    
    await update.message.reply_text(
        "üé¨ –ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –≤–∏–¥–µ–æ –∏–∑ –≤–∞—à–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!\n\n"
        "üì∏ –®–∞–≥ 1 –∏–∑ 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.\n"
        "–õ—É—á—à–µ –≤—Å–µ–≥–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å:\n\n"
        "‚úÖ –ü–æ—Ä—Ç—Ä–µ—Ç–∞–º–∏ –ª—é–¥–µ–π\n"
        "‚úÖ –ß—ë—Ç–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏\n"
        "‚úÖ –•–æ—Ä–æ—à–∏–º –æ—Å–≤–µ—â–µ–Ω–∏–µ–º\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ user_data

async def photo_received_wizard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –≤ –º–∞—Å—Ç–µ—Ä–µ"""
    if 'create_session' not in context.user_data:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é, —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        context.user_data['create_session'] = {
            'user_id': update.effective_user.id,
            'username': update.effective_user.username or update.effective_user.first_name
        }
    
    photo = update.message.photo[-1]
    file = await context.bot.get_file(photo.file_id)
    
    photo_data = BytesIO()
    await file.download_to_memory(photo_data)
    photo_data.seek(0)
    photo_base64 = base64.b64encode(photo_data.read()).decode()
    
    session = context.user_data['create_session']
    session.update({
        'photo_base64': photo_base64,
        'photo_size': file.file_size,
        'photo_width': photo.width,
        'photo_height': photo.height,
        'step': 2
    })
    
    keyboard = []
    for dur_key in ['5', '10', '15']:
        dur = DURATIONS[dur_key]
        text = f"{dur['emoji']} {dur['seconds']} —Å–µ–∫ - {dur['cost']}üí∞"
        if dur.get('recommended'):
            text += " ‚≠ê"
        keyboard.append([InlineKeyboardButton(text, callback_data=f'duration_{dur_key}')])
    
    keyboard.append([
        InlineKeyboardButton("‚èÆ –î—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", callback_data='back_photo'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    
    await update.message.reply_text(
        f"‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!\n\n"
        f"üìè {photo.width}√ó{photo.height} px\n"
        f"üì¶ {format_size_kb(file.file_size)}\n\n"
        f"‚è± –®–∞–≥ 2 –∏–∑ 3: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ user_data

async def duration_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±—Ä–∞–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
    query = update.callback_query
    await query.answer()
    
    if 'create_session' not in context.user_data:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    duration = query.data.split('_')[1]
    session = context.user_data['create_session']
    session.update({
        'duration': int(duration),
        'step': 3
    })
    
    keyboard = []
    for qual_key in ['low', 'medium', 'high']:
        qual = QUALITIES[qual_key]
        cost_mod = qual['cost_modifier']
        current_cost = DURATIONS[duration]['cost'] + cost_mod
        
        text = f"{qual['emoji']} {qual['name']} ({qual['pixels']}px)"
        if cost_mod > 0:
            text += f" - +{cost_mod}üí∞"
        else:
            text += " - –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
        
        if qual.get('recommended'):
            text += " ‚≠ê"
        
        text += f"\n–ò—Ç–æ–≥–æ: {current_cost}üí∞"
        
        keyboard.append([InlineKeyboardButton(text, callback_data=f'quality_{qual_key}')])
    
    keyboard.append([
        InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", callback_data='back_duration'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    
    await query.edit_message_text(
        f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫—É–Ω–¥\n\n"
        f"üì∫ –®–∞–≥ 3 –∏–∑ 3: –ö–∞—á–µ—Å—Ç–≤–æ\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ user_data

async def quality_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±—Ä–∞–Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    query = update.callback_query
    await query.answer()
    
    if 'create_session' not in context.user_data:
        await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start")
        return
    
    quality = query.data.split('_')[1]
    session = context.user_data['create_session']
    session.update({
        'quality': quality,
        'step': 4
    })
    
    duration = session['duration']
    cost = calculate_cost(duration, quality)
    balance = token_balance.get_balance(session['user_id'])
    
    if balance < cost:
        await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!", show_alert=True)
        await query.edit_message_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}\n"
            f"üíµ –¢—Ä–µ–±—É–µ—Ç—Å—è: {cost}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
        )
        return
    
    duration_info = DURATIONS[str(duration)]
    quality_info = QUALITIES[quality]
    
    text = f"""üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è

üì∏ **–§–æ—Ç–æ:** {session['photo_width']}√ó{session['photo_height']} px
‚è± **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration} —Å–µ–∫—É–Ω–¥
üì∫ **–ö–∞—á–µ—Å—Ç–≤–æ:** {quality_info['pixels']}px

üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:**
‚Ä¢ –ë–∞–∑–æ–≤–∞—è: {duration_info['cost']} —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: +{quality_info['cost_modifier']} —Ç–æ–∫–µ–Ω–æ–≤
‚Ä¢ **–ò—Ç–æ–≥–æ:** {cost} —Ç–æ–∫–µ–Ω–æ–≤

üí≥ **–ë–∞–ª–∞–Ω—Å:** {balance}
üíµ **–û—Å—Ç–∞–Ω–µ—Ç—Å—è:** {balance - cost}

‚è± **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:** ~{get_estimated_time(duration, quality)}

–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?
"""
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–û–ó–î–ê–¢–¨ –í–ò–î–ï–û", callback_data='confirm_create')],
        [],
        [
            InlineKeyboardButton("‚è± –í—Ä–µ–º—è", callback_data='edit_duration'),
            InlineKeyboardButton("üì∫ –ö–∞—á–µ—Å—Ç–≤–æ", callback_data='edit_quality')
        ],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]
    ]
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ user_data

async def confirm_create_wizard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    query = update.callback_query
    await query.answer("üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ!")
    
    session = context.user_data['create_session']
    user_id = session['user_id']
    
    await query.edit_message_text(
        f"üöÄ –°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ!\n\n"
        f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {session['duration']} —Å–µ–∫—É–Ω–¥\n"
        f"üì∫ –ö–∞—á–µ—Å—Ç–≤–æ: {QUALITIES[session['quality']]['pixels']}px\n\n"
        f"–û–∂–∏–¥–∞–π—Ç–µ..."
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    start_time = time.time()
    client_id = f"telegram_{user_id}_{int(start_time * 1000)}"
    
    status_message = query.message
    
    try:
        async with aiohttp.ClientSession() as http_session:
            progress_task = None
            
            async def progress_updater():
                await asyncio.sleep(2)
                while True:
                    await update_progress(status_message, start_time, "–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ")
                    await asyncio.sleep(2)
            
            try:
                progress_task = asyncio.create_task(progress_updater())
                
                # –ü–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ process_comfyui_connect
                video_data, error = await process_comfyui_connect(
                    http_session, session['photo_base64'], client_id,
                    status_message, start_time,
                    duration=session['duration'],
                    quality=session['quality']
                )
                
                if progress_task:
                    progress_task.cancel()
                    try:
                        await progress_task
                    except asyncio.CancelledError:
                        pass
                
                if error or not video_data:
                    elapsed = time.time() - start_time
                    await safe_edit_message(
                        status_message,
                        f"‚ùå {error or '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ'}\n"
                        f"‚è± –í—Ä–µ–º—è: {format_time(elapsed)}"
                    )
                else:
                    total_time = time.time() - start_time
                    processing_stats.add_time(total_time, session['duration'], session['quality'])
                    
                    token_balance.spend_tokens(user_id, calculate_cost(session['duration'], session['quality']))
                    token_balance.increment_videos(user_id)
                    new_balance = token_balance.get_balance(user_id)
                    
                    await safe_edit_message(
                        status_message,
                        f"‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {format_time(total_time)}!\n"
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ..."
                    )
                    
                    video_buffer = BytesIO(video_data)
                    video_buffer.name = 'video.mp4'
                    
                    await update.effective_chat.send_video(
                        video=video_buffer,
                        caption=(
                            f"üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n"
                            f"‚è± {format_time(total_time)}\n\n"
                            f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {calculate_cost(session['duration'], session['quality'])} —Ç–æ–∫–µ–Ω–æ–≤\n"
                            f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {new_balance}\n\n"
                            f"ü§ñ –°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º: @{update.get_bot().username}"
                        ),
                        reply_markup=create_generate_more_menu()
                    )
                    
                    await status_message.delete()
                    
            except asyncio.CancelledError:
                if progress_task:
                    progress_task.cancel()
                raise
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –º–∞—Å—Ç–µ—Ä–µ: {e}", exc_info=True)
        await safe_edit_message(
            status_message,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n{str(e)[:100]}"
        )
    finally:
        context.user_data.pop('create_session', None)
    
    return

async def back_to_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ"""
    query = update.callback_query
    await query.answer()
    
    session = context.user_data.get('create_session', {})
    session['step'] = 1
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')]]
    
    await query.edit_message_text(
        "üì∏ –®–∞–≥ 1 –∏–∑ 3: –§–æ—Ç–æ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ user_data

async def back_to_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    query = update.callback_query
    await query.answer()
    
    session = context.user_data['create_session']
    session['step'] = 2
    current_duration = str(session.get('duration', '10'))
    
    keyboard = []
    for dur_key in ['5', '10', '15']:
        dur = DURATIONS[dur_key]
        text = f"{dur['emoji']} {dur['seconds']} —Å–µ–∫ - {dur['cost']}üí∞"
        if dur_key == current_duration:
            text += " ‚úÖ"
        elif dur.get('recommended'):
            text += " ‚≠ê"
        keyboard.append([InlineKeyboardButton(text, callback_data=f'duration_{dur_key}')])
    
    keyboard.append([
        InlineKeyboardButton("‚èÆ –ö —Ñ–æ—Ç–æ", callback_data='back_photo'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    
    await query.edit_message_text(
        "‚è± –®–∞–≥ 2 –∏–∑ 3: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ user_data

async def edit_duration_from_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return await back_to_duration(update, context)

async def edit_quality_from_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    session = context.user_data['create_session']
    duration = str(session['duration'])
    current_quality = session.get('quality', 'medium')
    
    keyboard = []
    for qual_key in ['low', 'medium', 'high']:
        qual = QUALITIES[qual_key]
        cost_mod = qual['cost_modifier']
        current_cost = DURATIONS[duration]['cost'] + cost_mod
        
        text = f"{qual['emoji']} {qual['name']} ({qual['pixels']}px)"
        if cost_mod > 0:
            text += f" +{cost_mod}üí∞"
        
        if qual_key == current_quality:
            text += " ‚úÖ"
        elif qual.get('recommended'):
            text += " ‚≠ê"
        
        text += f"\n–ò—Ç–æ–≥–æ: {current_cost}üí∞"
        
        keyboard.append([InlineKeyboardButton(text, callback_data=f'quality_{qual_key}')])
    
    keyboard.append([
        InlineKeyboardButton("‚èÆ –ù–∞–∑–∞–¥", callback_data='back_quality'),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='cancel')
    ])
    
    await query.edit_message_text(
        "üì∫ –®–∞–≥ 3 –∏–∑ 3: –ö–∞—á–µ—Å—Ç–≤–æ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ user_data

async def back_to_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é (–ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    return await quality_selected(update, context)

async def cancel_wizard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞"""
    query = update.callback_query
    await query.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
    
    context.user_data.pop('create_session', None)
    
    await query.edit_message_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–î–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        reply_markup=create_main_menu()
    )
    
    return

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /cancel"""
    context.user_data.pop('create_session', None)
    
    await update.message.reply_text(
        "‚ùå –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        reply_markup=create_main_menu()
    )
    
    return

async def conversation_timeout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–∞–π–º–∞—É—Ç —Å–µ—Å—Å–∏–∏"""
    await update.message.reply_text(
        "‚è± –í—Ä–µ–º—è —Å–µ—Å—Å–∏–∏ –∏—Å—Ç–µ–∫–ª–æ (5 –º–∏–Ω—É—Ç)\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ",
        reply_markup=create_main_menu()
    )
    
    context.user_data.pop('create_session', None)
    return

# ============================================
# –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û (–ü–†–û–°–¢–û–ô –†–ï–ñ–ò–ú)
# ============================================

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    start_time = time.time()
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = token_balance.get_balance(user_id)
    token_balance.add_tokens(user_id, 0, user.username, user.first_name, user.last_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    waiting_mode = context.user_data.get('waiting_for_photo')
    
    if waiting_mode == 'wizard':
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
        context.user_data.pop('waiting_for_photo', None)
        # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
        await photo_received_wizard(update, context)
        return
    elif waiting_mode == 'quick':
        # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        context.user_data.pop('waiting_for_photo', None)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞
    default_cost = calculate_cost(10, 'medium')
    if balance < default_cost:
        await update.message.reply_text(
            f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!\n\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: {balance}\n'
            f'üíµ –¢—Ä–µ–±—É–µ—Ç—Å—è: {default_cost}\n\n'
            f'–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
        )
        return
    
    client_id = f"telegram_{user_id}_{int(start_time * 1000)}"
    display_name = user.first_name or user.username or str(user_id)
    logger.info(f"üì∏ –ó–∞–ø—Ä–æ—Å –æ—Ç {user_id} ({display_name}), –±–∞–ª–∞–Ω—Å: {balance}")
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ Telegram
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        photo_data = BytesIO()
        await file.download_to_memory(photo_data)
        photo_data.seek(0)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        photo_base64 = base64.b64encode(photo_data.read()).decode('utf-8')
        logger.info(f"üì¶ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ ({len(photo_base64)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        await safe_edit_message(status_message, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        async with aiohttp.ClientSession() as session:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_task = None
            
            async def progress_updater():
                await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                while True:
                    await update_progress(status_message, start_time, "–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ")
                    await asyncio.sleep(2)
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–æ–Ω–µ
                progress_task = asyncio.create_task(progress_updater())
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ComfyUI-Connect (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—ã—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
                video_data, error = await process_comfyui_connect(
                    session, photo_base64, client_id, status_message, start_time,
                    duration=10,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥
                    quality='medium'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                )
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if progress_task:
                    progress_task.cancel()
                    try:
                        await progress_task
                    except asyncio.CancelledError:
                        pass
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if error or not video_data:
                    elapsed = time.time() - start_time
                    await safe_edit_message(
                        status_message,
                        f"‚ùå {error or '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ'}\n"
                        f"‚è± –í—Ä–µ–º—è: {format_time(elapsed)}\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    return
                
                # –£—Å–ø–µ—Ö! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                total_time = time.time() - start_time
                processing_stats.add_time(total_time, 10, 'medium')  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                await safe_edit_message(
                    status_message,
                    f"‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {format_time(total_time)}!\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ..."
                )
                
                # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–µ–æ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                default_cost = calculate_cost(10, 'medium')
                token_balance.spend_tokens(user_id, default_cost)
                token_balance.increment_videos(user_id)
                new_balance = token_balance.get_balance(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                video_buffer = BytesIO(video_data)
                video_buffer.name = 'video.mp4'
                
                await update.message.reply_video(
                    video=video_buffer,
                    caption=(
                        f"üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n"
                        f"‚è± {format_time(total_time)}\n\n"
                        f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {default_cost} —Ç–æ–∫–µ–Ω–æ–≤\n"
                        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {new_balance}\n\n"
                        f"ü§ñ –°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º: @{update.get_bot().username}"
                    ),
                    reply_markup=create_generate_more_menu()
                )
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                await status_message.delete()
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {format_time(total_time)}")
                
            except asyncio.CancelledError:
                if progress_task:
                    progress_task.cancel()
                raise
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
        elapsed = time.time() - start_time
        await safe_edit_message(
            status_message,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n"
            f"‚è± –í—Ä–µ–º—è: {format_time(elapsed)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!\n'
        '–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.'
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("BOT_TOKEN=your_telegram_bot_token_here")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ (–±–µ–∑ ConversationHandler)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))  # –ì–ª–∞–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CommandHandler("addtokens", addtokens_command))  # –ê–¥–º–∏–Ω—Å–∫–∞—è
    application.add_handler(CommandHandler("users", users_command))  # –ê–¥–º–∏–Ω—Å–∫–∞—è
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(CallbackQueryHandler(handle_menu_callback, pattern='^(create_video|quick_mode|balance|stats|help|back_to_menu|create_more|quick_more)$'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ
    application.add_handler(CallbackQueryHandler(duration_selected, pattern='^duration_'))
    application.add_handler(CallbackQueryHandler(quality_selected, pattern='^quality_'))
    application.add_handler(CallbackQueryHandler(confirm_create_wizard, pattern='^confirm_create'))
    application.add_handler(CallbackQueryHandler(edit_duration_from_confirm, pattern='^edit_duration'))
    application.add_handler(CallbackQueryHandler(edit_quality_from_confirm, pattern='^edit_quality'))
    application.add_handler(CallbackQueryHandler(back_to_photo, pattern='^back_photo'))
    application.add_handler(CallbackQueryHandler(back_to_duration, pattern='^back_duration'))
    application.add_handler(CallbackQueryHandler(back_to_confirmation, pattern='^back_quality'))
    application.add_handler(CallbackQueryHandler(cancel_wizard, pattern='^cancel'))
    
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))  # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üì° ComfyUI-Connect API: {API_URL}")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üì° API: {API_URL}")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
