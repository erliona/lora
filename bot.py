import os
import logging
import base64
import asyncio
import time
import aiohttp
import sqlite3
from io import BytesIO
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest, RetryAfter
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
DEBUG_MODE = os.getenv('DEBUG', 'false').lower() == 'true'
log_level = logging.DEBUG if DEBUG_MODE else logging.INFO

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=log_level
)
logger = logging.getLogger(__name__)

if DEBUG_MODE:
    logger.info("üêõ DEBUG —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0'))
# ComfyUI-Connect endpoint –¥–ª—è workflow 'api-video'
API_URL = 'https://cuda.serge.cc/api/connect/workflows/api-video'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
TOKENS_PER_VIDEO = int(os.getenv('TOKENS_PER_VIDEO', '10'))
DEFAULT_TOKENS = int(os.getenv('DEFAULT_TOKENS', '100'))

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
processing_times = []

# –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–æ–≤
class TokenBalance:
    def __init__(self, db_path='balances.db'):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS balances (
                user_id INTEGER PRIMARY KEY,
                tokens INTEGER NOT NULL DEFAULT 0,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                videos_created INTEGER DEFAULT 0,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        conn.close()
        logger.info("üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_balance(self, user_id):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT tokens FROM balances WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        if result:
            return result[0]
        else:
            self.add_tokens(user_id, DEFAULT_TOKENS)
            return DEFAULT_TOKENS
    
    def add_tokens(self, user_id, amount, username=None, first_name=None, last_name=None):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO balances (user_id, tokens, username, first_name, last_name) 
            VALUES (?, ?, ?, ?, ?)
            ON CONFLICT(user_id) 
            DO UPDATE SET 
                tokens = tokens + ?, 
                username = COALESCE(?, username),
                first_name = COALESCE(?, first_name),
                last_name = COALESCE(?, last_name),
                updated_at = CURRENT_TIMESTAMP
        ''', (user_id, amount, username, first_name, last_name, amount, username, first_name, last_name))
        
        conn.commit()
        
        cursor.execute('SELECT tokens FROM balances WHERE user_id = ?', (user_id,))
        new_balance = cursor.fetchone()[0]
        conn.close()
        
        logger.info(f"üí∞ +{amount} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {user_id} ({username}), –±–∞–ª–∞–Ω—Å: {new_balance}")
        return new_balance
    
    def increment_videos(self, user_id):
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE balances 
            SET videos_created = videos_created + 1 
            WHERE user_id = ?
        ''', (user_id,))
        conn.commit()
        conn.close()
    
    def spend_tokens(self, user_id, amount):
        balance = self.get_balance(user_id)
        
        if balance < amount:
            return False
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            UPDATE balances 
            SET tokens = tokens - ?, updated_at = CURRENT_TIMESTAMP 
            WHERE user_id = ?
        ''', (amount, user_id))
        conn.commit()
        conn.close()
        
        logger.info(f"üí∏ -{amount} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å: {balance - amount}")
        return True
    
    def get_all_users(self):
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_id, tokens, username, first_name, last_name, videos_created, 
                   created_at, updated_at 
            FROM balances 
            ORDER BY tokens DESC
        ''')
        users = cursor.fetchall()
        conn.close()
        return users

token_balance = TokenBalance()

def format_time(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if seconds < 60:
        return f"{int(seconds)}—Å"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes}–º {secs}—Å"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours}—á {minutes}–º"

def get_average_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤)"""
    if not processing_times:
        return 120  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 2 –º–∏–Ω—É—Ç—ã
    recent = processing_times[-10:]
    return sum(recent) / len(recent)

def get_progress_bar(progress):
    """–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = int(progress * 20)
    return "‚ñì" * filled + "‚ñë" * (20 - filled)

async def safe_edit_message(message, text, max_retries=3):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    for attempt in range(max_retries):
        try:
            await message.edit_text(text)
            return True
        except RetryAfter as e:
            logger.warning(f"Rate limit, –∂–¥–µ–º {e.retry_after}—Å")
            await asyncio.sleep(e.retry_after)
        except BadRequest as e:
            if "Message is not modified" in str(e):
                return True
            elif "Message can't be edited" in str(e):
                return False
            else:
                logger.error(f"BadRequest: {e}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(1)
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    user = update.effective_user
    username = user.username
    first_name = user.first_name
    last_name = user.last_name
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    balance = token_balance.get_balance(user_id)
    token_balance.add_tokens(user_id, 0, username, first_name, last_name)
    
    avg_time = get_average_time()
    stats_text = ""
    if processing_times:
        stats_text = f"\nüìä –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {format_time(avg_time)}"
    
    await update.message.reply_text(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n'
        f'üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ - —è —Å–æ–∑–¥–∞–º –≤–∏–¥–µ–æ!{stats_text}\n\n'
        f'üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω–æ–≤\n'
        f'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {TOKENS_PER_VIDEO} —Ç–æ–∫–µ–Ω–æ–≤/–≤–∏–¥–µ–æ\n\n'
        f'üìã /balance - –±–∞–ª–∞–Ω—Å\n'
        f'üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
    )

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /balance"""
    user_id = update.effective_user.id
    username = update.effective_user.username or update.effective_user.first_name
    balance = token_balance.get_balance(user_id)
    videos_available = balance // TOKENS_PER_VIDEO
    
    await update.message.reply_text(
        f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å\n\n'
        f'üë§ {username}\n'
        f'ü™ô –¢–æ–∫–µ–Ω–æ–≤: {balance}\n'
        f'üé¨ –í–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {videos_available}\n\n'
        f'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {TOKENS_PER_VIDEO} —Ç–æ–∫–µ–Ω–æ–≤/–≤–∏–¥–µ–æ'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    if not processing_times:
        await update.message.reply_text(
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.\n'
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞!'
        )
        return
    
    avg = sum(processing_times) / len(processing_times)
    recent_avg = get_average_time()
    min_time = min(processing_times)
    max_time = max(processing_times)
    
    stats_text = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({len(processing_times)} –≤–∏–¥–µ–æ):\n\n"
        f"‚ö° –ë—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ: {format_time(min_time)}\n"
        f"üìà –í —Å—Ä–µ–¥–Ω–µ–º: {format_time(avg)}\n"
        f"üêå –î–æ–ª—å—à–µ –≤—Å–µ–≥–æ: {format_time(max_time)}\n"
        f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10: {format_time(recent_avg)}"
    )
    
    await update.message.reply_text(stats_text)

async def addtokens_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /addtokens - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text('‚ùå –ù–µ—Ç –ø—Ä–∞–≤')
        return
    
    if len(context.args) < 2:
        await update.message.reply_text(
            'üìù /addtokens USER_ID AMOUNT\n'
            '–ü—Ä–∏–º–µ—Ä: /addtokens 123456 100'
        )
        return
    
    try:
        target_id = int(context.args[0])
        amount = int(context.args[1])
        new_balance = token_balance.add_tokens(target_id, amount)
        await update.message.reply_text(
            f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount}\n'
            f'üë§ ID: {target_id}\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: {new_balance}'
        )
    except ValueError:
        await update.message.reply_text('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
    except Exception as e:
        await update.message.reply_text(f'‚ùå –û—à–∏–±–∫–∞: {e}')

async def users_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)"""
    user_id = update.effective_user.id
    
    if user_id != ADMIN_USER_ID:
        await update.message.reply_text('‚ùå –ù–µ—Ç –ø—Ä–∞–≤')
        return
    
    users = token_balance.get_all_users()
    
    if not users:
        await update.message.reply_text('üìã –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        return
    
    text = 'üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n'
    for user_data in users[:15]:
        uid, tokens, uname, fname, lname, videos, created, updated = user_data
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è
        full_name = ' '.join(filter(None, [fname, lname]))
        display_name = full_name or uname or '–ë–µ–∑ –∏–º–µ–Ω–∏'
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
        from datetime import datetime
        try:
            created_dt = datetime.fromisoformat(created)
            created_str = created_dt.strftime('%d.%m.%Y')
        except:
            created_str = '–Ω/–¥'
        
        text += (
            f'üë§ {display_name}\n'
            f'   ID: {uid}\n'
        )
        
        if uname:
            text += f'   @{uname}\n'
        
        text += (
            f'   üí∞ –¢–æ–∫–µ–Ω–æ–≤: {tokens}\n'
            f'   üé¨ –í–∏–¥–µ–æ: {videos}\n'
            f'   üìÖ –° {created_str}\n\n'
        )
    
    if len(users) > 15:
        text += f'...–∏ –µ—â–µ {len(users) - 15} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    
    text += f'\n\nüìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}'
    
    await update.message.reply_text(text)

async def update_progress(message, start_time, phase="–û–±—Ä–∞–±–æ—Ç–∫–∞"):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏—è"""
    elapsed = time.time() - start_time
    avg_time = get_average_time()
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å (–º–∞–∫—Å 95% –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
    if elapsed < avg_time:
        progress = min(elapsed / avg_time * 0.95, 0.95)
    else:
        progress = 0.95
    
    progress_bar = get_progress_bar(progress)
    
    # –û—Ü–µ–Ω–∫–∞ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
    remaining = max(0, avg_time - elapsed)
    
    if remaining < 10:
        estimate = "–ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ"
    elif remaining < 60:
        estimate = f"~{int(remaining)}—Å"
    else:
        minutes = int(remaining // 60)
        seconds = int(remaining % 60)
        estimate = f"~{minutes}–º {seconds}—Å"
    
    # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏–Ω–Ω–µ—Ä
    spinner = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
    frame = spinner[int(elapsed * 2) % len(spinner)]
    
    text = (
        f"{frame} {phase}...\n\n"
        f"üìä [{progress_bar}] {int(progress*100)}%\n"
        f"‚è± –ü—Ä–æ—à–ª–æ: {format_time(elapsed)}\n"
        f"üéØ –û—Å—Ç–∞–ª–æ—Å—å: {estimate}"
    )
    
    await safe_edit_message(message, text)

async def process_comfyui_connect(session, photo_base64, client_id, status_message, start_time):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ ComfyUI-Connect –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    
    ComfyUI-Connect –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É –≤ –æ—Ç–≤–µ—Ç–µ –≤ –≤–∏–¥–µ:
    {
        "output_name": "base64_encoded_data..."
    }
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º payload —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ComfyUI-Connect
    # –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç:
    # "node-name": { "image": { "type": "file", "content": "base64", "name": "filename" } }
    
    payload = {
        "image": {
            "image": {
                "type": "file",
                "content": photo_base64,
                "name": f"input_{client_id}.jpg"
            }
        },
        "client_id": client_id
    }
    
    logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ ComfyUI-Connect: {API_URL}")
    logger.debug(f"Payload keys: {payload.keys()}")
    
    try:
        # ComfyUI-Connect –º–æ–∂–µ—Ç –¥–æ–ª–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout
        timeout = aiohttp.ClientTimeout(total=600)  # 10 –º–∏–Ω—É—Ç
        
        async with session.post(API_URL, json=payload, timeout=timeout) as response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if response.status != 200:
                error_text = await response.text()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status}")
                logger.error(f"Response: {error_text[:500]}")
                return None, f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (HTTP {response.status})"
            
            # ComfyUI-Connect –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            result = await response.json()
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π JSON –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import json as json_lib
            result_str = json_lib.dumps(result, indent=2, ensure_ascii=False)
            # –û–±—Ä–µ–∑–∞–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ base64 —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –ª–æ–≥–æ–≤
            if len(result_str) > 2000:
                logger.info(f"Full response (truncated): {result_str[:2000]}...")
            else:
                logger.info(f"Full response: {result_str}")
            
            logger.info(f"Response keys: {list(result.keys())}")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª—é—á—É
            for key, value in result.items():
                if isinstance(value, str):
                    logger.info(f"  {key}: string –¥–ª–∏–Ω–∞={len(value)} –Ω–∞—á–∞–ª–æ={value[:100]}")
                elif isinstance(value, list):
                    logger.info(f"  {key}: list —ç–ª–µ–º–µ–Ω—Ç–æ–≤={len(value)}")
                    if len(value) > 0:
                        logger.info(f"    –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(value[0]).__name__}")
                        if isinstance(value[0], str) and len(value[0]) > 50:
                            logger.info(f"    –Ω–∞—á–∞–ª–æ: {value[0][:100]}")
                elif isinstance(value, dict):
                    logger.info(f"  {key}: dict –∫–ª—é—á–µ–π={len(value.keys())}, keys={list(value.keys())}")
                else:
                    logger.info(f"  {key}: {type(value).__name__} = {value}")
            
            # –ò—â–µ–º –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç–µ
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ workflow, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥ —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
            # –û–±—ã—á–Ω–æ —ç—Ç–æ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "output", "video", "result" –∏ —Ç.–¥.
            
            video_data = None
            found_key = None
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            def is_media_data(data):
                """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã –º–µ–¥–∏–∞-—Ñ–∞–π–ª–æ–≤"""
                if len(data) < 10:
                    return False
                # MP4, MOV, M4V
                if data[:4] in [b'\x00\x00\x00\x18', b'\x00\x00\x00\x1c', b'\x00\x00\x00 ', 
                               b'\x00\x00\x00\x14', b'ftyp']:
                    return True
                # GIF
                if data[:3] == b'GIF':
                    return True
                # JPEG
                if data[:2] == b'\xff\xd8':
                    return True
                # PNG
                if data[:4] == b'\x89PNG':
                    return True
                # WebM
                if data[:4] == b'\x1aE\xdf\xa3':
                    return True
                return False
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á 'output' (–∏–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ #output)
            priority_keys = ['output', 'result', 'video', 'image']
            all_keys = priority_keys + [k for k in result.keys() if k not in priority_keys]
            
            for key in all_keys:
                if key not in result:
                    continue
                    
                value = result[key]
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á '{key}' —Ç–∏–ø–∞ {type(value).__name__}")
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (base64), –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
                if isinstance(value, str) and len(value) > 100:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π base64
                        decoded = base64.b64decode(value)
                        logger.info(f"  ‚úì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} –±–∞–π—Ç, –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã: {decoded[:20].hex()}")
                        
                        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–µ (–±–æ–ª—å—à–µ 10KB), —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –º–µ–¥–∏–∞
                        if len(decoded) > 10000:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã
                            if is_media_data(decoded):
                                video_data = decoded
                                found_key = key
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –∫–ª—é—á–µ '{key}' –ø–æ magic bytes, —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                break
                            else:
                                # –ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª –Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º
                                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ magic bytes, –Ω–æ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π ({len(decoded)} –±–∞–π—Ç), –ø—Ä–æ–±—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å")
                                video_data = decoded
                                found_key = key
                                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ '{key}', —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                break
                    except Exception as e:
                        logger.debug(f"–ö–ª—é—á '{key}' –Ω–µ base64: {e}")
                        continue
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ base64 —Å—Ç—Ä–æ–∫ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–æ–≤)
                elif isinstance(value, list) and len(value) > 0:
                    logger.info(f"  üìã –°–ø–∏—Å–æ–∫ –∏–∑ {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    try:
                        first_item = value[0]
                        if isinstance(first_item, str) and len(first_item) > 100:
                            decoded = base64.b64decode(first_item)
                            logger.info(f"  ‚úì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} –±–∞–π—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞, –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã: {decoded[:20].hex()}")
                            
                            if len(decoded) > 10000:
                                if is_media_data(decoded):
                                    video_data = decoded
                                    found_key = f"{key}[0]"
                                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –º–∞—Å—Å–∏–≤–µ '{key}' –ø–æ magic bytes, —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                    break
                                else:
                                    logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ magic bytes –≤ –º–∞—Å—Å–∏–≤–µ, –Ω–æ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π ({len(decoded)} –±–∞–π—Ç)")
                                    video_data = decoded
                                    found_key = f"{key}[0]"
                                    logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ '{key}', —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                    break
                    except Exception as e:
                        logger.debug(f"–ú–∞—Å—Å–∏–≤ '{key}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç base64: {e}")
                        continue
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–≤–ª–æ–∂–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
                elif isinstance(value, dict):
                    logger.info(f"  üì¶ –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏: {list(value.keys())}")
                    try:
                        # –ò—â–µ–º –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞—Ä—è –∫–ª—é—á–∏ —Ç–∏–ø–∞ 'data', 'content', 'file'
                        for subkey in ['data', 'content', 'file', 'video', 'image', 'output']:
                            if subkey in value:
                                subvalue = value[subkey]
                                logger.info(f"    üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á '{subkey}' —Ç–∏–ø–∞ {type(subvalue).__name__}")
                                
                                # –ï—Å–ª–∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                                if isinstance(subvalue, list) and len(subvalue) > 0:
                                    first_item = subvalue[0]
                                    logger.info(f"      üìã –°–ø–∏—Å–æ–∫ –∏–∑ {len(subvalue)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                                    if isinstance(first_item, str) and len(first_item) > 100:
                                        decoded = base64.b64decode(first_item)
                                        logger.info(f"      ‚úì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} –±–∞–π—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, hex: {decoded[:20].hex()}")
                                        
                                        if len(decoded) > 10000:
                                            if is_media_data(decoded):
                                                video_data = decoded
                                                found_key = f"{key}.{subkey}[0]"
                                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ '{key}.{subkey}[0]' –ø–æ magic bytes, —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                                break
                                            else:
                                                logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ magic bytes –≤ '{key}.{subkey}[0]', –Ω–æ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π ({len(decoded)} –±–∞–π—Ç)")
                                                video_data = decoded
                                                found_key = f"{key}.{subkey}[0]"
                                                logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ '{key}.{subkey}[0]', —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                                break
                                
                                # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é
                                elif isinstance(subvalue, str) and len(subvalue) > 100:
                                    decoded = base64.b64decode(subvalue)
                                    logger.info(f"    ‚úì –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ {len(decoded)} –±–∞–π—Ç")
                                    
                                    if len(decoded) > 10000:
                                        if is_media_data(decoded):
                                            video_data = decoded
                                            found_key = f"{key}.{subkey}"
                                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ '{key}.{subkey}' –ø–æ magic bytes, —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                            break
                                        else:
                                            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ magic bytes –≤ '{key}.{subkey}', –Ω–æ —Ñ–∞–π–ª –±–æ–ª—å—à–æ–π")
                                            video_data = decoded
                                            found_key = f"{key}.{subkey}"
                                            logger.info(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ '{key}.{subkey}', —Ä–∞–∑–º–µ—Ä: {len(decoded)} –±–∞–π—Ç")
                                            break
                        if video_data:
                            break
                    except Exception as e:
                        logger.debug(f"Dict '{key}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞: {e}")
                        continue
            
            if video_data:
                return video_data, None
            else:
                logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ –æ—Ç–≤–µ—Ç–µ. –ö–ª—é—á–∏: {list(result.keys())}")
                # Fallback: –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ History API (–¥–ª—è VHS_VideoCombine)
                logger.info("üîç Output –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É—é —á–µ—Ä–µ–∑ History API...")
                
                # –ò–º—è —Ñ–∞–π–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ (–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏)
                search_filename = f"input_{client_id}.jpg"
                logger.info(f"üîé –ò—â—É –∑–∞–¥–∞—á—É —Å —Ñ–∞–π–ª–æ–º: {search_filename}")
                
                # –ñ–¥–µ–º —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ —Ç–æ—á–Ω–æ –ø–æ—è–≤–∏–ª–∞—Å—å –≤ history
                await asyncio.sleep(5)
                
                for attempt in range(20):  # 20 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 3 —Å–µ–∫—É–Ω–¥—ã
                    try:
                        history_url = "https://cuda.serge.cc/history"
                        async with session.get(history_url) as hist_response:
                            if hist_response.status != 200:
                                await asyncio.sleep(3)
                                continue
                            
                            history = await hist_response.json()
                            logger.debug(f"History: {len(history)} –∑–∞–ø–∏—Å–µ–π")
                            
                            # –ò—â–µ–º –Ω–∞—à—É –∑–∞–¥–∞—á—É –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –≤ workflow
                            for prompt_id, prompt_data in history.items():
                                if not isinstance(prompt_data, dict):
                                    continue
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º workflow (prompt[2])
                                prompt = prompt_data.get('prompt', [])
                                if isinstance(prompt, list) and len(prompt) > 2:
                                    workflow = prompt[2]
                                    
                                    # –ò—â–µ–º search_filename –≤ workflow
                                    import json as json_lib
                                    workflow_str = json_lib.dumps(workflow)
                                    
                                    if search_filename in workflow_str:
                                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –Ω–∞—à–∞ –∑–∞–¥–∞—á–∞: {prompt_id}")
                                        
                                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º outputs
                                        outputs = prompt_data.get('outputs', {})
                                        if not outputs:
                                            logger.debug(f"Outputs –ø–æ–∫–∞ –ø—É—Å—Ç—ã –¥–ª—è {prompt_id}, –∂–¥—É...")
                                            continue
                                        
                                        for node_id, node_output in outputs.items():
                                            if not isinstance(node_output, dict):
                                                continue
                                            
                                            for output_key in ['gifs', 'videos']:
                                                videos = node_output.get(output_key, [])
                                                if videos and isinstance(videos, list):
                                                    for video_info in videos:
                                                        if isinstance(video_info, dict):
                                                            filename = video_info.get('filename', '')
                                                            if filename.endswith(('.mp4', '.webm', '.avi', '.mov', '.gif')):
                                                                subfolder = video_info.get('subfolder', '')
                                                                folder_type = video_info.get('type', 'output')
                                                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ: {filename}")
                                                                
                                                                download_url = "https://cuda.serge.cc/view"
                                                                params = {"filename": filename, "type": folder_type, "subfolder": subfolder}
                                                                
                                                                async with session.get(download_url, params=params) as dl_response:
                                                                    if dl_response.status == 200:
                                                                        video_bytes = await dl_response.read()
                                                                        logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ {len(video_bytes)} –±–∞–π—Ç")
                                                                        return video_bytes, None
                        
                    except Exception as e:
                        logger.error(f"History error: {e}")
                    
                    await asyncio.sleep(3)
                
                return None, "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ history"
    
    except asyncio.TimeoutError:
        logger.error(f"‚è± –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ 10 –º–∏–Ω—É—Ç")
        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (10 –º–∏–Ω)"
    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        return None, f"–û—à–∏–±–∫–∞: {str(e)[:100]}"

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    start_time = time.time()
    user_id = update.effective_user.id
    user = update.effective_user
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = token_balance.get_balance(user_id)
    token_balance.add_tokens(user_id, 0, user.username, user.first_name, user.last_name)
    
    if balance < TOKENS_PER_VIDEO:
        await update.message.reply_text(
            f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤!\n\n'
            f'üí∞ –ë–∞–ª–∞–Ω—Å: {balance}\n'
            f'üíµ –¢—Ä–µ–±—É–µ—Ç—Å—è: {TOKENS_PER_VIDEO}\n\n'
            f'–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{(await update.get_bot()).username} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
        )
        return
    
    client_id = f"telegram_{user_id}_{int(start_time * 1000)}"
    display_name = user.first_name or user.username or str(user_id)
    logger.info(f"üì∏ –ó–∞–ø—Ä–æ—Å –æ—Ç {user_id} ({display_name}), –±–∞–ª–∞–Ω—Å: {balance}")
    
    # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_message = await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ Telegram
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        photo_data = BytesIO()
        await file.download_to_memory(photo_data)
        photo_data.seek(0)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
        photo_base64 = base64.b64encode(photo_data.read()).decode('utf-8')
        logger.info(f"üì¶ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ ({len(photo_base64)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        await safe_edit_message(status_message, "üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
        async with aiohttp.ClientSession() as session:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            progress_task = None
            
            async def progress_updater():
                await asyncio.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
                while True:
                    await update_progress(status_message, start_time, "–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ")
                    await asyncio.sleep(2)
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–æ–Ω–µ
                progress_task = asyncio.create_task(progress_updater())
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ComfyUI-Connect (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç)
                video_data, error = await process_comfyui_connect(
                    session, photo_base64, client_id, status_message, start_time
                )
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                if progress_task:
                    progress_task.cancel()
                    try:
                        await progress_task
                    except asyncio.CancelledError:
                        pass
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if error or not video_data:
                    elapsed = time.time() - start_time
                    await safe_edit_message(
                        status_message,
                        f"‚ùå {error or '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ'}\n"
                        f"‚è± –í—Ä–µ–º—è: {format_time(elapsed)}\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                    )
                    return
                
                # –£—Å–ø–µ—Ö! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
                total_time = time.time() - start_time
                processing_times.append(total_time)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if len(processing_times) > 50:
                    processing_times.pop(0)
                
                await safe_edit_message(
                    status_message,
                    f"‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ {format_time(total_time)}!\n"
                    f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ..."
                )
                
                # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–∏–¥–µ–æ
                token_balance.spend_tokens(user_id, TOKENS_PER_VIDEO)
                token_balance.increment_videos(user_id)
                new_balance = token_balance.get_balance(user_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                video_buffer = BytesIO(video_data)
                video_buffer.name = 'video.mp4'
                
                await update.message.reply_video(
                    video=video_buffer,
                    caption=(
                        f"üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n"
                        f"‚è± {format_time(total_time)}\n\n"
                        f"üí∏ –°–ø–∏—Å–∞–Ω–æ: {TOKENS_PER_VIDEO} —Ç–æ–∫–µ–Ω–æ–≤\n"
                        f"üí∞ –û—Å—Ç–∞—Ç–æ–∫: {new_balance}"
                    )
                )
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                await status_message.delete()
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {format_time(total_time)}")
                
            except asyncio.CancelledError:
                if progress_task:
                    progress_task.cancel()
                raise
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
        elapsed = time.time() - start_time
        await safe_edit_message(
            status_message,
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞\n"
            f"‚è± –í—Ä–µ–º—è: {format_time(elapsed)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await update.message.reply_text(
        'üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ!\n'
        '–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.'
    )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ:")
        print("BOT_TOKEN=your_telegram_bot_token_here")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("addtokens", addtokens_command))
    application.add_handler(CommandHandler("users", users_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üì° ComfyUI-Connect API: {API_URL}")
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print(f"üì° API: {API_URL}")
    
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
