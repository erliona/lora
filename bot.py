import os
import logging
import base64
import asyncio
import time
import json
import websockets
from io import BytesIO
from collections import deque
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest, RetryAfter
import aiohttp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
API_URL = 'https://cuda.serge.cc/api/connect/workflows/api-video'
WS_URL = 'wss://cuda.serge.cc/ws'

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ —Ñ–∞–∑–∞–º
class ProcessingStats:
    def __init__(self):
        self.completion_times = deque(maxlen=50)
        self.phase_timings = {
            'server_request': deque(maxlen=50),
            'queue_wait': deque(maxlen=50),
            'video_creation': deque(maxlen=50),
            'download': deque(maxlen=50)
        }
        self.load_stats()
    
    def add_completion_time(self, duration):
        self.completion_times.append(duration)
        self.save_stats()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è: {duration}—Å, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(self.completion_times)}")
    
    def add_phase_timing(self, phase, duration):
        if phase in self.phase_timings:
            self.phase_timings[phase].append(duration)
            logger.info(f"–§–∞–∑–∞ '{phase}': {duration}—Å")
            self.save_stats()
    
    def get_phase_estimate(self, phase):
        if phase not in self.phase_timings:
            return 5
        
        timings = list(self.phase_timings[phase])
        if not timings:
            defaults = {
                'server_request': 3,
                'queue_wait': 10, 
                'video_creation': 100,
                'download': 2
            }
            return defaults.get(phase, 5)
        
        return sum(timings) / len(timings)
    
    def get_estimate(self, elapsed_time, current_phase=None):
        if not self.completion_times:
            if elapsed_time < 30:
                return "~30-90—Å (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"
            elif elapsed_time < 60:
                return "~60-120—Å (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"
            else:
                return "–ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)"
        
        server_avg = self.get_phase_estimate('server_request')
        queue_avg = self.get_phase_estimate('queue_wait')
        creation_avg = self.get_phase_estimate('video_creation')
        download_avg = self.get_phase_estimate('download')
        
        total_avg = server_avg + queue_avg + creation_avg + download_avg
        
        if current_phase == "–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä":
            remaining = total_avg - elapsed_time
        elif current_phase == "–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É":
            remaining = queue_avg + creation_avg + download_avg - max(0, elapsed_time - server_avg)
        elif current_phase == "–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ":
            remaining = creation_avg + download_avg - max(0, elapsed_time - server_avg - queue_avg)
        elif current_phase == "–°–∫–∞—á–∏–≤–∞—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ":
            remaining = download_avg - max(0, elapsed_time - total_avg + download_avg)
        else:
            remaining = total_avg - elapsed_time
        
        remaining = max(0, remaining)
        
        if remaining < 10:
            return "–ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ"
        elif remaining < 30:
            return f"~{int(remaining)}—Å"
        elif remaining < 120:
            return f"~{int(remaining//60)}–º {int(remaining%60)}—Å"
        else:
            return f"~{int(remaining//60)}–º"
    
    def get_progress_ratio(self, elapsed_time, current_phase, queue_position=0):
        server_avg = self.get_phase_estimate('server_request')
        queue_avg = self.get_phase_estimate('queue_wait')
        creation_avg = self.get_phase_estimate('video_creation')
        download_avg = self.get_phase_estimate('download')
        
        total_avg = server_avg + queue_avg + creation_avg + download_avg
        
        if current_phase == "–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä":
            phase_progress = min(elapsed_time / server_avg, 1.0)
            return phase_progress * 0.05
            
        elif current_phase == "–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É":
            if queue_position > 0:
                return 0.05 + min(elapsed_time / (queue_avg * (queue_position + 1)), 0.10)
            else:
                phase_elapsed = max(0, elapsed_time - server_avg)
                phase_progress = min(phase_elapsed / queue_avg, 1.0)
                return 0.05 + (phase_progress * 0.10)
            
        elif current_phase == "–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ":
            base_time = server_avg + queue_avg
            if elapsed_time <= base_time:
                return 0.15
            phase_elapsed = elapsed_time - base_time
            phase_progress = min(phase_elapsed / creation_avg, 1.0)
            return 0.15 + (phase_progress * 0.75)
            
        elif current_phase == "–°–∫–∞—á–∏–≤–∞—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ":
            base_time = server_avg + queue_avg + creation_avg
            if elapsed_time <= base_time:
                return 0.90
            phase_elapsed = elapsed_time - base_time
            phase_progress = min(phase_elapsed / download_avg, 1.0)
            return 0.90 + (phase_progress * 0.08)
        
        return min(elapsed_time / total_avg, 0.98)
    
    def get_stats_summary(self):
        if not self.completion_times:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
        
        times = list(self.completion_times)
        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)
        
        phase_stats = []
        for phase_name, phase_key in [
            ("–û—Ç–ø—Ä–∞–≤–∫–∞", "server_request"),
            ("–û—á–µ—Ä–µ–¥—å", "queue_wait"), 
            ("–°–æ–∑–¥–∞–Ω–∏–µ", "video_creation"),
            ("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ", "download")
        ]:
            if self.phase_timings[phase_key]:
                avg_phase = sum(self.phase_timings[phase_key]) / len(self.phase_timings[phase_key])
                if avg_phase >= 0.1:
                    phase_stats.append(f"{phase_name}: {format_time(avg_phase)}")
                else:
                    phase_stats.append(f"{phase_name}: < 1—Å")
        
        base_stats = (
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ({len(times)} –∑–∞–¥–∞–Ω–∏–π):\n"
            f"‚ö° –ë—ã—Å—Ç—Ä–µ–µ –≤—Å–µ–≥–æ: {format_time(min_time)}\n"
            f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {format_time(avg_time)}\n"
            f"üêå –î–æ–ª—å—à–µ –≤—Å–µ–≥–æ: {format_time(max_time)}"
        )
        
        if phase_stats:
            return base_stats + f"\n\nüîÑ –ü–æ —Ñ–∞–∑–∞–º:\n" + "\n".join(phase_stats)
        
        return base_stats
    
    def save_stats(self):
        try:
            data = {
                'completion_times': list(self.completion_times),
                'phase_timings': {k: list(v) for k, v in self.phase_timings.items()}
            }
            with open('processing_stats.json', 'w') as f:
                json.dump(data, f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def load_stats(self):
        try:
            if os.path.exists('processing_stats.json'):
                with open('processing_stats.json', 'r') as f:
                    data = json.load(f)
                    
                if isinstance(data, list):
                    self.completion_times.extend(data)
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)")
                else:
                    self.completion_times.extend(data.get('completion_times', []))
                    for phase, timings in data.get('phase_timings', {}).items():
                        if phase in self.phase_timings:
                            self.phase_timings[phase].extend(timings)
                    
                    total_records = len(self.completion_times)
                    phase_records = sum(len(v) for v in self.phase_timings.values())
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {total_records} –æ–±—â–∏—Ö –∑–∞–ø–∏—Å–µ–π, {phase_records} –∑–∞–ø–∏—Å–µ–π –ø–æ —Ñ–∞–∑–∞–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

stats = ProcessingStats()

# WebSocket —Ç—Ä–µ–∫–µ—Ä —Ñ–∞–∑
class WebSocketPhaseTracker:
    def __init__(self, client_id, start_time):
        self.client_id = client_id
        self.start_time = start_time
        self.current_phase = None
        self.phase_start_time = start_time
        self.phase_timings = {}
        self.queue_position = 0
        self.is_executing = False
        self.is_completed = False
    
    def switch_phase(self, new_phase):
        current_time = time.time()
        
        if self.current_phase:
            phase_duration = current_time - self.phase_start_time
            self.phase_timings[self.current_phase] = phase_duration
            
            phase_key_map = {
                "–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä": "server_request",
                "–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É": "queue_wait",
                "–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ": "video_creation", 
                "–°–∫–∞—á–∏–≤–∞—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ": "download"
            }
            
            if self.current_phase in phase_key_map:
                stats.add_phase_timing(phase_key_map[self.current_phase], phase_duration)
                logger.info(f"{self.client_id}: –∑–∞–≤–µ—Ä—à–∏–ª —Ñ–∞–∑—É '{self.current_phase}' –∑–∞ {format_time(phase_duration)}")
        
        self.current_phase = new_phase
        self.phase_start_time = current_time
        logger.info(f"{self.client_id}: –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ '{new_phase}'")
    
    def update_queue_position(self, queue_remaining):
        self.queue_position = queue_remaining
        if queue_remaining == 0:
            if self.current_phase != "–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ":
                self.switch_phase("–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ")
    
    def set_executing(self):
        self.is_executing = True
        if self.current_phase != "–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ":
            self.switch_phase("–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ")
    
    def set_completed(self):
        self.is_completed = True
        if self.current_phase != "–°–∫–∞—á–∏–≤–∞—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ":
            self.switch_phase("–°–∫–∞—á–∏–≤–∞—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ")
    
    def set_downloading(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ñ–∞–∑—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        if self.current_phase != "–°–∫–∞—á–∏–≤–∞—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ":
            self.switch_phase("–°–∫–∞—á–∏–≤–∞—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ")
    
    def get_elapsed_time(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return time.time() - self.start_time
    
    def finish(self):
        if self.current_phase:
            self.switch_phase(None)
        
        total_time = time.time() - self.start_time
        stats.add_completion_time(total_time)
        
        logger.info(f"{self.client_id}: –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {format_time(total_time)}")
        for phase, duration in self.phase_timings.items():
            logger.info(f"  {phase}: {format_time(duration)}")

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç—Ä–µ–∫–µ—Ä–æ–≤
phase_trackers = {}

def format_time(seconds):
    if seconds < 60:
        return f"{int(seconds)}—Å"
    elif seconds < 3600:
        minutes = int(seconds // 60)
        secs = int(seconds % 60)
        return f"{minutes}–º {secs}—Å"
    else:
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        return f"{hours}—á {minutes}–º"

async def safe_edit_message(message, text, max_retries=3):
    for attempt in range(max_retries):
        try:
            await message.edit_text(text)
            return True
        except RetryAfter as e:
            logger.warning(f"Rate limit hit, waiting {e.retry_after} seconds")
            await asyncio.sleep(e.retry_after)
        except BadRequest as e:
            if "Message is not modified" in str(e):
                return True
            elif "Message can't be edited" in str(e):
                logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return False
            else:
                logger.error(f"BadRequest –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                await asyncio.sleep(1)
            else:
                return False
    return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats_summary = stats.get_stats_summary()
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è —Å–æ–∑–¥–∞–º –∏–∑ –Ω–µ–≥–æ –≤–∏–¥–µ–æ.\n'
        '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n\n'
        '‚ö° –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É\n'
        '‚è± –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ WebSocket\n'
        f'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n'
        f'{stats_summary}'
    )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stats_summary = stats.get_stats_summary()
    
    if stats.completion_times:
        times = list(stats.completion_times)
        recent_avg = sum(times[-10:]) / min(10, len(times))
        
        additional_info = (
            f"\n\nüí° –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–¥–∞–Ω–∏–π: {format_time(recent_avg)} –≤ —Å—Ä–µ–¥–Ω–µ–º\n"
            f"üìà –¢—Ä–µ–Ω–¥: {'‚¨ÜÔ∏è —Ä–∞—Å—Ç–µ—Ç' if recent_avg > sum(times)/len(times) else '‚¨áÔ∏è —Å–Ω–∏–∂–∞–µ—Ç—Å—è'}"
        )
    else:
        additional_info = "\n\nüîÑ –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
    
    await update.message.reply_text(stats_summary + additional_info)

# WebSocket –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def update_progress_message(status_message, client_id, start_time):
    try:
        tracker = phase_trackers.get(client_id)
        if not tracker:
            return
        
        elapsed = time.time() - start_time
        elapsed_str = format_time(elapsed)
        current_phase = tracker.current_phase or "–û–±—Ä–∞–±–æ—Ç–∫–∞"
        
        loading_frames = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
        frame = loading_frames[int(elapsed * 2) % len(loading_frames)]
        
        estimate = stats.get_estimate(elapsed, current_phase)
        progress_ratio = stats.get_progress_ratio(elapsed, current_phase, tracker.queue_position)
        progress_ratio = min(progress_ratio, 0.98)
        
        filled_bars = int(progress_ratio * 18)
        progress = "‚ñì" * filled_bars + "‚ñë" * (18 - filled_bars)
        
        queue_info = ""
        if current_phase == "–°–æ–∑–¥–∞—é –≤–∏–¥–µ–æ":
            queue_info = " (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)"
        elif current_phase == "–°–∫–∞—á–∏–≤–∞—é –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ":
            queue_info = " (—Å–∫–∞—á–∏–≤–∞—é)"
        elif current_phase == "–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É" and tracker.queue_position > 0:
            queue_info = f" (–≤ –æ—á–µ—Ä–µ–¥–∏: {tracker.queue_position})"
        elif tracker.is_executing:
            queue_info = " (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è)"
        
        new_message = (
            f'{frame} {current_phase}{queue_info}...\n'
            f'‚è± –ü—Ä–æ—à–ª–æ: {elapsed_str}\n'
            f'üìä [{progress}]\n'
            f'üéØ –û—Ü–µ–Ω–∫–∞: {estimate}\n'
            f'üÜî {client_id[-8:]}'
        )
        
        success = await safe_edit_message(status_message, new_message)
        if not success:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è {client_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")

async def progress_updater_task(status_message, client_id, start_time, stop_event=None):
    try:
        while not (stop_event and stop_event.is_set()):
            await update_progress_message(status_message, client_id, start_time)
            await asyncio.sleep(2)
    except asyncio.CancelledError:
        logger.info(f"Progress updater –¥–ª—è {client_id} –æ—Ç–º–µ–Ω–µ–Ω")
        if client_id in phase_trackers:
            phase_trackers[client_id].finish()
            del phase_trackers[client_id]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ progress_updater_task: {e}")

async def websocket_monitor_task(client_id, tracker, stop_event=None):
    """
    WebSocket –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏.
    –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    """
    try:
        ws_url = f"{WS_URL}?clientId={client_id}"
        async with websockets.connect(ws_url) as websocket:
            logger.info(f"WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è {client_id}")
            await websocket.recv()  # –ß–∏—Ç–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            while not (stop_event and stop_event.is_set()):
                try:
                    message = await asyncio.wait_for(websocket.recv(), timeout=2.0)
                    data = json.loads(message)
                    msg_type = data.get('type')
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Å–æ–±—ã—Ç–∏—è –æ—á–µ—Ä–µ–¥–∏
                    if msg_type == 'status':
                        status_data = data.get('data', {}).get('status', {})
                        exec_info = status_data.get('exec_info', {})
                        queue_remaining = exec_info.get('queue_remaining', 0)
                        
                        old_pos = tracker.queue_position
                        tracker.update_queue_position(queue_remaining)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        if old_pos != queue_remaining:
                            logger.info(f"{client_id}: –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏ {queue_remaining}")
                        
                        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–∞–∑—É –∫–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥—å –æ–±–Ω—É–ª—è–µ—Ç—Å—è
                        if queue_remaining == 0 and not tracker.is_executing:
                            tracker.set_executing()
                            logger.info(f"{client_id}: –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                        
                except asyncio.TimeoutError:
                    continue
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket –¥–ª—è {client_id}: {e}")
                    break
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket –¥–ª—è {client_id}: {e}")


async def poll_for_completion(session, client_id, tracker, stop_event=None, poll_interval=3):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç history API –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (filename, subfolder, folder_type) –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏–ª–∏ None.
    """
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–ª—è {client_id}")
    
    while not (stop_event and stop_event.is_set()):
        try:
            await asyncio.sleep(poll_interval)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º history
            history_url = "https://cuda.serge.cc/history"
            async with session.get(history_url) as response:
                if response.status != 200:
                    logger.warning(f"{client_id}: history API –≤–µ—Ä–Ω—É–ª {response.status}")
                    continue
                
                history = await response.json()
                
                # –ò—â–µ–º –∑–∞–¥–∞—á—É –ø–æ client_id
                for prompt_id, prompt_data in history.items():
                    if not isinstance(prompt_data, dict) or 'prompt' not in prompt_data:
                        continue
                    
                    prompt_info = prompt_data['prompt']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ prompt_info —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                    if not isinstance(prompt_info, dict):
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º client_id –≤ prompt
                    found_client_id = None
                    for node_id, node_data in prompt_info.items():
                        if isinstance(node_data, dict):
                            inputs = node_data.get('inputs', {})
                            if inputs.get('client_id') == client_id:
                                found_client_id = client_id
                                break
                    
                    if not found_client_id:
                        continue
                    
                    # –ù–∞—à–ª–∏ –Ω–∞—à—É –∑–∞–¥–∞—á—É! –ü—Ä–æ–≤–µ—Ä—è–µ–º outputs
                    outputs = prompt_data.get('outputs', {})
                    for node_id, node_output in outputs.items():
                        if not isinstance(node_output, dict):
                            continue
                        
                        videos = node_output.get('gifs', []) or node_output.get('videos', [])
                        
                        for video_info in videos:
                            if isinstance(video_info, dict):
                                filename = video_info.get('filename', '')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ-—Ñ–∞–π–ª
                                if any(filename.endswith(ext) for ext in ['.mp4', '.avi', '.mov', '.gif']):
                                    subfolder = video_info.get('subfolder', '')
                                    folder_type = video_info.get('type', 'output')
                                    
                                    logger.info(f"{client_id}: –Ω–∞–π–¥–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç {filename}")
                                    tracker.set_completed()
                                    
                                    return (filename, subfolder, folder_type)
        
        except asyncio.CancelledError:
            logger.info(f"{client_id}: –æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω")
            raise
        except Exception as e:
            logger.error(f"{client_id}: –æ—à–∏–±–∫–∞ –æ–ø—Ä–æ—Å–∞: {e}")
            await asyncio.sleep(poll_interval)
    
    return None

async def download_video_file(session, filename, subfolder="", folder_type="output"):
    try:
        download_url = f"https://cuda.serge.cc/view"
        params = {
            "filename": filename,
            "type": folder_type,
            "subfolder": subfolder
        }
        
        logger.info(f"–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª {filename}")
        
        async with session.get(download_url, params=params) as response:
            if response.status == 200:
                content = await response.read()
                logger.info(f"–§–∞–π–ª —Å–∫–∞—á–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç")
                return content
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: HTTP {response.status}")
                return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None

async def process_video_result(update, status_message, video_data, client_id, total_time):
    try:
        await safe_edit_message(
            status_message,
            f'‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∑–∞ {format_time(total_time)}!\n'
            f'üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...\n'
            f'üÜî {client_id[-8:]}'
        )
        
        if isinstance(video_data, bytes):
            video_buffer = BytesIO(video_data)
            video_buffer.name = 'video.mp4'
            
            await update.message.reply_video(
                video=video_buffer,
                caption=(
                    f'üé¨ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n'
                    f'‚è± –í—Ä–µ–º—è: {format_time(total_time)}\n'
                    f'üÜî {client_id[-8:]}'
                )
            )
            await status_message.delete()
            
        elif isinstance(video_data, str):
            try:
                if video_data.startswith('http'):
                    await update.message.reply_text(
                        f'üé¨ –í–∞—à–µ –≤–∏–¥–µ–æ: {video_data}\n'
                        f'‚è± –í—Ä–µ–º—è: {format_time(total_time)}\n'
                        f'üÜî {client_id[-8:]}'
                    )
                else:
                    video_bytes = base64.b64decode(video_data)
                    video_buffer = BytesIO(video_bytes)
                    video_buffer.name = 'video.mp4'
                    
                    await update.message.reply_video(
                        video=video_buffer,
                        caption=(
                            f'üé¨ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n'
                            f'‚è± –í—Ä–µ–º—è: {format_time(total_time)}\n'
                            f'üÜî {client_id[-8:]}'
                        )
                    )
                
                await status_message.delete()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {client_id}: {e}")
                await safe_edit_message(
                    status_message,
                    f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∑–∞ {format_time(total_time)}\n'
                    f'üÜî {client_id[-8:]}'
                )
        
        else:
            await safe_edit_message(
                status_message,
                f'‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∑–∞ {format_time(total_time)}\n'
                f'üÜî {client_id[-8:]}'
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è {client_id}: {e}")
        await safe_edit_message(
            status_message,
            f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ {format_time(total_time)}\n'
            f'üÜî {client_id[-8:]}'
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: WebSocket –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ + polling –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    """
    start_time = time.time()
    client_id = f"telegram_{update.effective_user.id}_{int(start_time * 1000)}"
    
    logger.info(f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}, client_id: {client_id}")
    
    status_message = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    
    # –°–æ–∑–¥–∞–µ–º tracker
    tracker = WebSocketPhaseTracker(client_id, start_time)
    phase_trackers[client_id] = tracker
    
    # Tasks
    progress_task = None
    ws_task = None
    poll_task = None
    stop_event = asyncio.Event()
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        photo_data = BytesIO()
        await file.download_to_memory(photo_data)
        photo_data.seek(0)
        
        photo_base64 = base64.b64encode(photo_data.read()).decode('utf-8')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        tracker.switch_phase("–û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
        
        async with aiohttp.ClientSession() as session:
            payload = {
                "image": {
                    "image": {
                        "type": "file",
                        "content": photo_base64,
                        "name": f"input_{client_id}.jpg"
                    }
                },
                "client_id": client_id
            }
            
            logger.info(f"{client_id}: –æ—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
            async with session.post(API_URL, json=payload) as response:
                if response.status != 200:
                    elapsed = time.time() - start_time
                    await safe_edit_message(
                        status_message,
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: HTTP {response.status}\n"
                        f"‚è± –í—Ä–µ–º—è: {format_time(elapsed)}\n"
                        f"üÜî {client_id[-8:]}"
                    )
                    return
                
                result = await response.json()
                logger.info(f"{client_id}: –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç {result.get('status')}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            tracker.switch_phase("–í –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É")
            
            progress_task = asyncio.create_task(
                progress_updater_task(status_message, client_id, start_time, stop_event)
            )
            
            ws_task = asyncio.create_task(
                websocket_monitor_task(client_id, tracker, stop_event)
            )
            
            poll_task = asyncio.create_task(
                poll_for_completion(session, client_id, tracker, stop_event)
            )
            
            # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–¥–æ 5 –º–∏–Ω—É—Ç)
            try:
                result = await asyncio.wait_for(poll_task, timeout=300)
                
                if result:
                    filename, subfolder, folder_type = result
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                    tracker.set_downloading()
                    logger.info(f"{client_id}: —Å–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ {filename}")
                    
                    video_bytes = await download_video_file(
                        session, filename, subfolder, folder_type
                    )
                    
                    if video_bytes:
                        total_time = time.time() - start_time
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        await process_video_result(
                            update, status_message, video_bytes, 
                            client_id, total_time
                        )
                        logger.info(f"{client_id}: –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞ {format_time(total_time)}")
                    else:
                        elapsed = time.time() - start_time
                        await safe_edit_message(
                            status_message,
                            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ\n"
                            f"‚è± –í—Ä–µ–º—è: {format_time(elapsed)}\n"
                            f"üÜî {client_id[-8:]}"
                        )
                else:
                    elapsed = time.time() - start_time
                    await safe_edit_message(
                        status_message,
                        f"‚è± –¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
                        f"‚è± –í—Ä–µ–º—è: {format_time(elapsed)}\n"
                        f"üÜî {client_id[-8:]}"
                    )
            
            except asyncio.TimeoutError:
                elapsed = time.time() - start_time
                await safe_edit_message(
                    status_message,
                    f"‚è± –¢–∞–π–º–∞—É—Ç –ø–æ—Å–ª–µ {format_time(elapsed)}\n"
                    f"üÜî {client_id[-8:]}"
                )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {client_id}: {e}")
        elapsed = time.time() - start_time
        await safe_edit_message(
            status_message,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:100]}\n"
            f"‚è± –í—Ä–µ–º—è: {format_time(elapsed)}\n"
            f"üÜî {client_id[-8:]}"
        )
    
    finally:
        # Cleanup
        if client_id in phase_trackers:
            phase_trackers[client_id].finish()
            del phase_trackers[client_id]
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        stop_event.set()
        
        for task in [progress_task, ws_task, poll_task]:
            if task and not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç. –Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏!'
    )

def main():
    if not BOT_TOKEN:
        print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç—É–¥–∞:")
        print("BOT_TOKEN=your_telegram_bot_token_here")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    
    print("üöÄ WebSocket –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
